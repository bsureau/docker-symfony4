# refer to php-fpm container
upstream php-fpm {
    server php-fpm:9000;
}

server {
   # execute some Lua code and stores the results in given variables
   set_by_lua $app_server_name 'return os.getenv("APP_SERVER_NAME")';

   #listen on http port number (by convention)
   listen 80;

   # Redirect HTTP request to HTTPS
   return 301 https://www.$app_server_name$request_uri;
}

server {
    # execute some Lua code and stores the results in given variables
    set_by_lua $app_server_name 'return os.getenv("APP_SERVER_NAME")';
    set_by_lua $app_project_dir_name 'return os.getenv("APP_PROJECT_DIR_NAME")';

    # sets the name of virtual server
    server_name $app_server_name;

    # listen on https port number (by convention)
    listen 443 ssl;

    # sets the root directory for requests
    root /var/www/project/${app_project_dir_name}/public/;

    # SSL settings

    # enables specified protocols
    ssl_protocols             TLSv1 TLSv1.1 TLSv1.2;

    # specifies a file with the certificate
    ssl_certificate           /etc/nginx/cert/selfsigned-cert.crt;

    # specifies a file with the secret key
    ssl_certificate_key       /etc/nginx/cert/selfsigned-cert.key;

    #sets the types (here, shared) and sizes of caches that store session parameters
    ssl_session_cache         shared:SSL:10m;

    # specifies a time during which a client may reuse the session parameters
    ssl_session_timeout       15m;

    # specifies the enabled ciphers
    ssl_ciphers               "ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA:ECDHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES128-SHA256:DHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES256-GCM-SHA384:AES128-GCM-SHA256:AES256-SHA256:AES128-SHA256:AES256-SHA:AES128-SHA:DES-CBC3-SHA:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!MD5:!PSK:!RC4";
    ssl_prefer_server_ciphers on;

    # add HSTS policy in header response
    add_header Strict-Transport-Security "max-age=63072000; includeSubdomains; preload";

    # session cookie stealing protection
    add_header X-Frame-Options "DENY";

    # disable content-type sniffing on some browsers
    add_header X-Content-Type-Options nosniff;

    # enables the Cross-site scripting (XSS) filter built into most recent web browsers
    add_header X-XSS-Protection "1; mode=block";

    location / {
        # try to serve file directly, fallback to index.php
        try_files $uri /index.php$is_args$args;
    }

    # Symfony 4 configuration
    # see https://symfony.com/doc/current/setup/web_server_configuration.html#nginx
    location ~ ^/index\.php(/|$) {
        fastcgi_pass php-fpm;
        fastcgi_split_path_info ^(.+\.php)(/.*)$;
        fastcgi_read_timeout 600;
        include fastcgi_params;

        # When you are using symlinks to link the document root to the
        # current version of your application, you should pass the real
        # application path instead of the path to the symlink to PHP
        # FPM.
        # Otherwise, PHP's OPcache may not properly detect changes to
        # your PHP files (see https://github.com/zendtech/ZendOptimizerPlus/issues/126
        # for more information).
        fastcgi_param SCRIPT_FILENAME $realpath_root$fastcgi_script_name;
        fastcgi_param DOCUMENT_ROOT $realpath_root;

        fastcgi_param HTTPS on;

        # Prevents URIs that include the front controller. This will 404:
        # http://domain.tld/index.php/some-path
        internal;
    }

    # Return 404 for all other php files not matching the front controller
    # this prevents access to other php files you don't want to be accessible.
    location ~ \.php$ {
        return 404;
    }

    # Disable access to .htaccess files
    location ~*\.htaccess$ {
        deny all;
    }

    error_log /var/log/nginx/symfony_error.log;
    access_log /var/log/nginx/symfony_access.log;
}